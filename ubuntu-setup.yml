---
- name: Setup Ubuntu 24 System
  hosts: localhost
  connection: local
  become: yes

  vars:
    ssh_port: 33412
    ssh_user: "{{ ansible_env.USER }}"
    healthchecks_url: "https://hc-ping.com/4020ae5f-3d0c-4944-bb01-1bbacb496d38"
    auto_reboot_time: "03:00"  # 3 AM daily reboot

    nvidia_driver_version: "580"
    cuda_version: "13-0"
    cuda_version_full: "13.0"
    tensorrt_version: "10.13.*"
    tensorrt_full_version: "10.13.*-1+cuda13.0"
    realvnc_version: "7.13.0"
    
    log_file: "/var/log/ansible-ubuntu-setup-{{ ansible_date_time.iso8601_basic_short }}.log"

  tasks:

    # ==========================================================
    # 0. INITIALIZE LOG FILE
    # ==========================================================
    - name: Create log directory
      file:
        path: /var/log
        state: directory
        mode: '0755'
    
    - name: Initialize log file with header
      copy:
        dest: "{{ log_file }}"
        content: |
          ===================================================================
          Ubuntu 24 System Setup - Started at {{ ansible_date_time.iso8601 }}
          Host: {{ inventory_hostname }}
          ===================================================================
          
        mode: '0644'
      tags: always

    # ==========================================================
    # 1. SYSTEM UPDATE
    # ==========================================================
    - name: Update apt cache and upgrade packages
      apt:
        update_cache: yes
        cache_valid_time: 3600
        upgrade: dist
      register: apt_upgrade
    
    - name: Log system update
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "1. SYSTEM UPDATE - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ System updated successfully." >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ System updated successfully."

    # ==========================================================
    # 2. COMMON UTILITIES & MONITORING TOOLS
    # ==========================================================
    - name: Install general developer and monitoring tools
      apt:
        name:
          - build-essential
          - git
          - cmake
          - unzip
          - zip
          - wget
          - curl
          - vim
          - nano
          - tree
          - jq
          - netcat-traditional
          - psmisc
          - htop
          - btop
          - bmon
          - iftop
          - nvtop
          - wavemon
          - net-tools
          - lm-sensors
          - speedtest-cli
        state: present
      register: tools_install
    
    - name: Print versions of installed core tools
      shell: |
        echo "htop: $(htop --version | head -n1)"
        echo "git: $(git --version)"
        echo "cmake: $(cmake --version | head -n1)"
      register: base_versions
    
    - name: Log tools installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "2. COMMON UTILITIES & MONITORING TOOLS - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        {{ base_versions.stdout_lines | map('regex_replace', '^', 'echo "') | map('regex_replace', '$', '" >> {{ log_file }}') | join('\n') }}
        echo "" >> {{ log_file }}
    
    - debug: msg="{{ base_versions.stdout_lines }}"

    # ==========================================================
    # 3. SSH CONFIGURATION
    # ==========================================================
    - name: Install and configure OpenSSH server
      apt: { name: openssh-server, state: present }

    - name: Configure SSH port and authentication
      blockinfile:
        path: /etc/ssh/sshd_config
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          Port {{ ssh_port }}
          PasswordAuthentication yes
          PubkeyAuthentication yes
          PermitRootLogin no
        validate: '/usr/sbin/sshd -t -f %s'
      notify: restart sshd
      register: ssh_config
    
    - name: Log SSH configuration
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "3. SSH CONFIGURATION - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ SSH configured on port {{ ssh_port }}" >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ SSH configured on port {{ ssh_port }}"

    # ==========================================================
    # 4. FIREWALL
    # ==========================================================
    - name: Install and enable UFW
      apt: { name: ufw, state: present }
    - name: Allow SSH through UFW
      ufw: { rule: allow, port: "{{ ssh_port }}", proto: tcp }
    - name: Enable UFW non-interactively
      command: ufw --force enable
      args: { creates: /etc/ufw/ufw.conf }
      register: ufw_enable
    
    - name: Log firewall configuration
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "4. FIREWALL - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ UFW enabled with SSH port {{ ssh_port }} open." >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ UFW enabled with SSH port {{ ssh_port }} open."

    # ==========================================================
    # 5. AUTO-REBOOT SYSTEMD TIMER
    # ==========================================================
    - name: Create daily reboot service
      copy:
        dest: /etc/systemd/system/daily-reboot.service
        mode: '0644'
        content: |
          [Unit]
          Description=Daily System Reboot

          [Service]
          Type=oneshot
          ExecStart=/usr/sbin/shutdown -r now

    - name: Create daily reboot timer
      copy:
        dest: /etc/systemd/system/daily-reboot.timer
        mode: '0644'
        content: |
          [Unit]
          Description=Daily System Reboot Timer

          [Timer]
          OnCalendar=*-*-* {{ auto_reboot_time }}:00
          Persistent=true

          [Install]
          WantedBy=timers.target
      notify: reload systemd

    - name: Enable daily reboot timer
      systemd: { name: daily-reboot.timer, enabled: yes, state: started, daemon_reload: yes }
      register: reboot_timer
    
    - name: Log auto-reboot configuration
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "5. AUTO-REBOOT SYSTEMD TIMER - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ Daily reboot timer active ({{ auto_reboot_time }})" >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ Daily reboot timer active ({{ auto_reboot_time }})"

    # ==========================================================
    # 6. TAILSCALE
    # ==========================================================
    - name: Setup Tailscale repository and install
      block:
        - apt_key: { url: https://pkgs.tailscale.com/stable/ubuntu/noble.noarmor.gpg, state: present }
        - apt_repository:
            repo: "deb https://pkgs.tailscale.com/stable/ubuntu noble main"
            state: present
            update_cache: yes
        - apt: { name: tailscale, state: present }
        - systemd: { name: tailscaled, enabled: yes, state: started }
        - shell: echo "✅ Tailscale installed. Run 'sudo tailscale up' to authenticate." >> {{ log_file }}
      rescue:
        - debug: msg="⚠️ Tailscale repo or install failed."
        - shell: echo "⚠️ Tailscale repo or install failed." >> {{ log_file }}
    
    - name: Log Tailscale installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "6. TAILSCALE - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
    
    - debug: msg="✅ Tailscale installed. Run 'sudo tailscale up' to authenticate."

    # ==========================================================
    # 7. REALVNC SERVER
    # ==========================================================
    - name: Install RealVNC
      block:
        - get_url:
            url: "https://downloads.realvnc.com/download/file/vnc.files/VNC-Server-{{ realvnc_version }}-Linux-x64.deb"
            dest: /tmp/realvnc-server.deb
            timeout: 60
        - apt: { deb: /tmp/realvnc-server.deb }
        - shell: echo "✅ RealVNC {{ realvnc_version }} installed." >> {{ log_file }}
        - debug: msg="✅ RealVNC {{ realvnc_version }} installed."
      rescue:
        - debug: msg="⚠️ RealVNC download failed."
        - shell: echo "⚠️ RealVNC download failed." >> {{ log_file }}
    
    - name: Log RealVNC installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "7. REALVNC SERVER - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "" >> {{ log_file }}

    # ==========================================================
    # 8. VISUAL STUDIO CODE
    # ==========================================================
    - name: Install Visual Studio Code
      block:
        - apt_key: { url: https://packages.microsoft.com/keys/microsoft.asc, state: present }
        - apt_repository:
            repo: "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
            state: present
            update_cache: yes
        - apt: { name: code, state: present }
        - shell: echo "✅ VS Code installed." >> {{ log_file }}
        - debug: msg="✅ VS Code installed."
      rescue:
        - debug: msg="⚠️ VS Code repo or install failed."
        - shell: echo "⚠️ VS Code repo or install failed." >> {{ log_file }}
    
    - name: Log VS Code installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "8. VISUAL STUDIO CODE - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "" >> {{ log_file }}

    # ==========================================================
    # 9. DISPLAY SERVER (XORG) & VM DETECTION
    # ==========================================================
    - name: Detect if running in a virtual machine
      shell: systemd-detect-virt
      register: virt_detect
      failed_when: false
      changed_when: false

    - name: Set VM detection fact
      set_fact:
        is_virtual_machine: "{{ virt_detect.rc == 0 and virt_detect.stdout != 'none' }}"
        virtualization_type: "{{ virt_detect.stdout | default('none') }}"

    - name: Disable Wayland and force Xorg
      lineinfile:
        path: /etc/gdm3/custom.conf
        regexp: '^#?WaylandEnable='
        line: 'WaylandEnable=false'
        insertafter: '^\[daemon\]'
        backup: yes
      notify: restart gdm3
      register: xorg_config

    - name: Apply VM-specific display fix (QXL)
      block:
        - name: Create X11 config directory
          file:
            path: /etc/X11/xorg.conf.d
            state: directory
            mode: '0755'

        - name: Configure QXL display for VMs
          copy:
            dest: /etc/X11/xorg.conf.d/10-qxl-display.conf
            mode: '0644'
            content: |
              Section "ServerFlags"
                  Option "AutoAddGPU" "false"
              EndSection

              Section "ServerLayout"
                  Identifier "Layout0"
                  Screen 0 "Screen0"
              EndSection

              Section "Device"
                  Identifier "QXL"
                  Driver "qxl"
                  BusID "PCI:0:1:0"
              EndSection

              Section "Screen"
                  Identifier "Screen0"
                  Device "QXL"
              EndSection
          notify: restart gdm3

        - name: Remove conflicting NVIDIA X11 config
          file:
            path: /etc/X11/xorg.conf.d/10-nvidia.conf
            state: absent
          notify: restart gdm3

        - shell: |
            echo "✅ VM detected ({{ virtualization_type }}): Applied QXL display fix" >> {{ log_file }}

        - debug:
            msg: "✅ VM detected ({{ virtualization_type }}): Applied QXL display fix"

      when: is_virtual_machine

    - name: Log display server configuration
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "9. DISPLAY SERVER (XORG) & VM DETECTION - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "System type: {{ 'Virtual Machine (' + virtualization_type + ')' if is_virtual_machine else 'Physical/Bare Metal' }}" >> {{ log_file }}
        echo "✅ Display configured for Xorg (Wayland disabled)." >> {{ log_file }}
        echo "" >> {{ log_file }}

    - debug:
        msg: |
          ✅ Display configured for Xorg (Wayland disabled)
          System: {{ 'Virtual Machine (' + virtualization_type + ')' if is_virtual_machine else 'Physical/Bare Metal' }}

    # ==========================================================
    # 10. NVIDIA DRIVER & GRUB CONFIG
    # ==========================================================
    - name: Install NVIDIA driver
      block:
        - apt_repository: { repo: ppa:graphics-drivers/ppa, state: present, update_cache: yes }
        - apt: { name: "nvidia-driver-{{ nvidia_driver_version }}", state: present }
        - lineinfile:
            path: /etc/default/grub
            regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
            line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash nvidia-drm.modeset=1"'
            backup: yes
          register: grub_updated
        - command: update-grub
          when: grub_updated.changed
        - copy:
            dest: /etc/modprobe.d/nvidia.conf
            mode: '0644'
            content: |
              options nvidia-drm modeset=1
              options nvidia NVreg_PreserveVideoMemoryAllocations=1
        - shell: echo "✅ NVIDIA driver {{ nvidia_driver_version }} installed with KMS enabled." >> {{ log_file }}
    
    - name: Log NVIDIA driver installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "10. NVIDIA DRIVER & GRUB CONFIG - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ NVIDIA driver {{ nvidia_driver_version }} installed with KMS enabled."

    # ==========================================================
    # 11. CUDA TOOLKIT
    # ==========================================================
    - name: Install CUDA Toolkit
      block:
        - get_url:
            url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/cuda-keyring_1.1-1_all.deb
            dest: /tmp/cuda-keyring.deb
        - apt: { deb: /tmp/cuda-keyring.deb }
        - apt: { update_cache: yes }
        - apt: { name: "cuda-toolkit-{{ cuda_version }}", state: present }
        - copy:
            dest: /etc/profile.d/cuda.sh
            mode: '0644'
            content: |
              export PATH=/usr/local/cuda-{{ cuda_version_full }}/bin:$PATH
              export LD_LIBRARY_PATH=/usr/local/cuda-{{ cuda_version_full }}/lib64:$LD_LIBRARY_PATH
        - copy:
            dest: /etc/ld.so.conf.d/cuda.conf
            mode: '0644'
            content: |
              /usr/local/cuda-{{ cuda_version_full }}/lib64
          notify: update ldconfig
        - shell: echo "✅ CUDA {{ cuda_version_full }} installed." >> {{ log_file }}
        - debug: msg="✅ CUDA {{ cuda_version_full }} installed."
      rescue:
        - debug: msg="⚠️ CUDA installation failed."
        - shell: echo "⚠️ CUDA installation failed." >> {{ log_file }}
    
    - name: Log CUDA installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "11. CUDA TOOLKIT - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "" >> {{ log_file }}

    # ==========================================================
    # 12. TENSORRT
    # ==========================================================
    - name: Install TensorRT 10.13 with version pinning
      block:
        - name: Update apt cache for TensorRT
          apt:
            update_cache: yes

        - name: Check available TensorRT versions
          shell: apt-cache madison tensorrt-dev | grep "{{ tensorrt_version }}" | head -1 | awk '{print $3}'
          register: available_trt_version
          failed_when: false
          changed_when: false

        - name: Set TensorRT package version
          set_fact:
            trt_pkg_version: "{{ available_trt_version.stdout if available_trt_version.stdout != '' else tensorrt_full_version }}"

        - name: Install TensorRT packages with specific version
          apt:
            name:
              - "tensorrt-dev={{ trt_pkg_version }}"
              - "tensorrt-libs={{ trt_pkg_version }}"
              - "libnvinfer10={{ trt_pkg_version }}"
              - "libnvinfer-dev={{ trt_pkg_version }}"
              - "libnvinfer-headers-dev={{ trt_pkg_version }}"
              - "libnvinfer-plugin10={{ trt_pkg_version }}"
              - "libnvonnxparsers10={{ trt_pkg_version }}"
              - "python3-libnvinfer={{ trt_pkg_version }}"
              - "python3-libnvinfer-dev={{ trt_pkg_version }}"
            state: present
            allow_downgrades: yes
          register: trt_install

        - name: Hold TensorRT packages to prevent upgrades
          dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - tensorrt-dev
            - tensorrt-libs
            - libnvinfer10
            - libnvinfer-dev
            - libnvinfer-headers-dev
            - libnvinfer-plugin10
            - libnvonnxparsers10
            - python3-libnvinfer
            - python3-libnvinfer-dev

        - name: Verify packages are held
          shell: dpkg --get-selections | grep -E "(tensorrt|libnvinfer)" | grep hold
          register: held_packages
          changed_when: false
          failed_when: held_packages.rc != 0

        - name: Verify installed TensorRT version
          shell: dpkg -l | grep -E "(tensorrt|libnvinfer)" | grep -v "^rc"
          register: trt_ver
          changed_when: false

        - shell: |
            echo "{{ trt_ver.stdout }}" >> {{ log_file }}
            echo "" >> {{ log_file }}
            echo "Packages held (will NOT be upgraded by apt):" >> {{ log_file }}
            echo "{{ held_packages.stdout }}" >> {{ log_file }}

        - debug:
            msg: |
              ✅ TensorRT {{ tensorrt_version }} installed and pinned
              Version: {{ trt_pkg_version }}

              Held packages (protected from apt upgrade):
              {{ held_packages.stdout_lines }}

      rescue:
        - debug: msg="⚠️ TensorRT installation failed. Trying fallback..."

        - name: Fallback - Install latest TensorRT without version pinning
          apt:
            name:
              - tensorrt-dev
              - tensorrt-libs
              - python3-libnvinfer
              - python3-libnvinfer-dev
            state: present
          register: trt_fallback

        - name: Hold fallback TensorRT packages
          dpkg_selections:
            name: "{{ item }}"
            selection: hold
          loop:
            - tensorrt-dev
            - tensorrt-libs
            - python3-libnvinfer
            - python3-libnvinfer-dev
          when: trt_fallback is succeeded

        - name: Get held packages in fallback
          shell: dpkg --get-selections | grep -E "(tensorrt|libnvinfer)" | grep hold || echo "No packages held"
          register: fallback_held
          changed_when: false

        - debug:
            msg: |
              ⚠️ TensorRT installed but version {{ tensorrt_version }} not available
              Using latest version and holding it to prevent upgrades
              {{ fallback_held.stdout_lines }}

        - shell: |
            echo "⚠️ TensorRT installed but version {{ tensorrt_version }} not available. Using latest." >> {{ log_file }}
            echo "Held packages: {{ fallback_held.stdout }}" >> {{ log_file }}

    - name: Log TensorRT installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "12. TENSORRT - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "" >> {{ log_file }}

    # ==========================================================
    # 13. DOCKER + NVIDIA RUNTIME
    # ==========================================================
    - name: Install Docker and NVIDIA container runtime
      block:
        - name: Install Docker prerequisites
          apt:
            name:
              - apt-transport-https
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present

        - name: Create keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Download Docker GPG key
          get_url:
            url: https://download.docker.com/linux/ubuntu/gpg
            dest: /tmp/docker.gpg
            mode: '0644'

        - name: Dearmor Docker GPG key
          shell: gpg --dearmor -o /etc/apt/keyrings/docker.gpg /tmp/docker.gpg
          args:
            creates: /etc/apt/keyrings/docker.gpg

        - name: Set permissions on Docker GPG key
          file:
            path: /etc/apt/keyrings/docker.gpg
            mode: '0644'

        - name: Add Docker repository
          apt_repository:
            repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu noble stable"
            state: present
            filename: docker
            update_cache: yes

        - name: Install Docker packages
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
            update_cache: yes

        - name: Add user to docker group
          user:
            name: "{{ ssh_user }}"
            groups: docker
            append: yes

        - name: Download NVIDIA Docker GPG key
          get_url:
            url: https://nvidia.github.io/libnvidia-container/gpgkey
            dest: /tmp/nvidia-docker.gpg
            mode: '0644'

        - name: Dearmor NVIDIA Docker GPG key
          shell: gpg --dearmor -o /etc/apt/keyrings/nvidia-docker.gpg /tmp/nvidia-docker.gpg
          args:
            creates: /etc/apt/keyrings/nvidia-docker.gpg

        - name: Set permissions on NVIDIA Docker GPG key
          file:
            path: /etc/apt/keyrings/nvidia-docker.gpg
            mode: '0644'

        - name: Add NVIDIA Docker repository
          shell: |
            distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
            curl -s -L https://nvidia.github.io/libnvidia-container/$distribution/libnvidia-container.list | \
            sed 's#deb https://#deb [signed-by=/etc/apt/keyrings/nvidia-docker.gpg] https://#g' | \
            tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
          args:
            creates: /etc/apt/sources.list.d/nvidia-container-toolkit.list

        - name: Update apt cache for NVIDIA repository
          apt:
            update_cache: yes

        - name: Install NVIDIA container toolkit
          apt:
            name: nvidia-container-toolkit
            state: present

        - name: Configure Docker to use NVIDIA runtime
          copy:
            dest: /etc/docker/daemon.json
            mode: '0644'
            content: |
              {
                "runtimes": {
                  "nvidia": {
                    "path": "nvidia-container-runtime",
                    "runtimeArgs": []
                  }
                },
                "default-runtime": "nvidia"
              }
          notify: restart docker

        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: yes

        - shell: echo "✅ Docker and NVIDIA Container Toolkit installed." >> {{ log_file }}
        - debug: msg="✅ Docker and NVIDIA Container Toolkit installed."
      rescue:
        - debug: msg="⚠️ Docker installation failed."
        - shell: echo "⚠️ Docker installation failed." >> {{ log_file }}
    
    - name: Log Docker installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "13. DOCKER + NVIDIA RUNTIME - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "" >> {{ log_file }}

    # ==========================================================
    # 14. PYTHON & DEV TOOLS
    # ==========================================================
    - name: Install Python and dev tools
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - python3.12-venv
          - python3-dev
        state: present
      register: python_install
    
    - shell: python3 --version
      register: pyver
    
    - name: Log Python installation
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "14. PYTHON & DEV TOOLS - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ Python {{ pyver.stdout }} installed." >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ Python {{ pyver.stdout }} installed."

    # ==========================================================
    # 15. HEALTHCHECKS.IO SERVICE
    # ==========================================================
    - name: Create healthcheck ping script
      copy:
        dest: /usr/local/bin/healthcheck-ping.sh
        mode: '0755'
        content: |
          #!/bin/bash
          set -e
          curl -fsS -m 10 --retry 5 -o /dev/null "{{ healthchecks_url }}" || echo "Healthcheck failed $(date)"
    - name: Create systemd service for healthcheck
      copy:
        dest: /etc/systemd/system/healthcheck.service
        mode: '0644'
        content: |
          [Unit]
          Description=Healthchecks.io ping

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/healthcheck-ping.sh
    - name: Create systemd timer for healthcheck (every 30 s)
      copy:
        dest: /etc/systemd/system/healthcheck.timer
        mode: '0644'
        content: |
          [Unit]
          Description=Run healthcheck ping every 30 seconds

          [Timer]
          OnBootSec=15s
          OnUnitActiveSec=30s
          AccuracySec=5s

          [Install]
          WantedBy=timers.target
      notify: reload systemd
    - name: Enable and start healthcheck timer
      systemd: { name: healthcheck.timer, enabled: yes, state: started }
      register: healthcheck_timer
    
    - name: Log healthcheck configuration
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "15. HEALTHCHECKS.IO SERVICE - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ Healthcheck service active (ping every 30 s)." >> {{ log_file }}
        echo "" >> {{ log_file }}
    
    - debug: msg="✅ Healthcheck service active (ping every 30 s)."

    # ==========================================================
    # 16. AUTO_TEST PYTHON ENVIRONMENT SETUP
    # ==========================================================
    - name: Create code directory structure
      become: no
      file:
        path: "{{ ansible_env.HOME }}/code/auto_test"
        state: directory
        mode: '0755'

    - name: Create Python 3.12 virtual environment
      become: no
      command: python3.12 -m venv "{{ ansible_env.HOME }}/code/auto_test/venv"
      args:
        creates: "{{ ansible_env.HOME }}/code/auto_test/venv"

    - name: Upgrade pip, setuptools, and wheel in venv
      become: no
      shell: |
        source {{ ansible_env.HOME }}/code/auto_test/venv/bin/activate
        pip install --upgrade pip setuptools wheel
      args:
        executable: /bin/bash

    - name: Install PyTorch with CUDA support
      become: no
      shell: |
        source {{ ansible_env.HOME }}/code/auto_test/venv/bin/activate
        pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
      args:
        executable: /bin/bash
      register: torch_install

    - name: Install ultralytics, tensorrt, and onnxruntime-gpu
      become: no
      shell: |
        source {{ ansible_env.HOME }}/code/auto_test/venv/bin/activate
        pip install ultralytics nvidia-tensorrt onnxruntime-gpu
      args:
        executable: /bin/bash
      register: ml_packages_install

    - name: Verify CUDA is available to PyTorch
      become: no
      shell: |
        source {{ ansible_env.HOME }}/code/auto_test/venv/bin/activate
        python3 << 'EOF'
        import torch
        print(f"PyTorch version: {torch.__version__}")
        print(f"CUDA available: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"CUDA version: {torch.version.cuda}")
            print(f"GPU count: {torch.cuda.device_count()}")
            print(f"GPU name: {torch.cuda.get_device_name(0)}")
        else:
            print("WARNING: CUDA is not available to PyTorch!")
        EOF
      args:
        executable: /bin/bash
      register: cuda_verification
      failed_when: "'CUDA available: False' in cuda_verification.stdout"

    - name: Create activation helper script
      become: no
      copy:
        dest: "{{ ansible_env.HOME }}/code/auto_test/activate.sh"
        mode: '0755'
        content: |
          #!/bin/bash
          source {{ ansible_env.HOME }}/code/auto_test/venv/bin/activate
          echo "Virtual environment activated!"
          echo "Python: $(which python3)"
          python3 << 'EOF'
          import torch
          print(f"PyTorch {torch.__version__} - CUDA available: {torch.cuda.is_available()}")
          if torch.cuda.is_available():
              print(f"GPU: {torch.cuda.get_device_name(0)}")
          EOF

    - name: Log auto_test environment setup
      shell: |
        echo "===========================================================" >> {{ log_file }}
        echo "16. AUTO_TEST PYTHON ENVIRONMENT SETUP - $(date)" >> {{ log_file }}
        echo "===========================================================" >> {{ log_file }}
        echo "✅ Created ~/code/auto_test directory" >> {{ log_file }}
        echo "✅ Python 3.12 virtual environment created" >> {{ log_file }}
        echo "✅ Installed: ultralytics, nvidia-tensorrt, onnxruntime-gpu" >> {{ log_file }}
        echo "" >> {{ log_file }}
        echo "{{ cuda_verification.stdout }}" >> {{ log_file }}
        echo "" >> {{ log_file }}

    - debug:
        msg: |
          ✅ Auto test environment ready at ~/code/auto_test
          {{ cuda_verification.stdout_lines }}

          To activate: source ~/code/auto_test/activate.sh

    # ==========================================================
    # 17. FINAL MESSAGE
    # ==========================================================
    - name: Write final summary to log
      shell: |
        echo "===================================================================" >> {{ log_file }}
        echo "✅ Setup complete!" >> {{ log_file }}
        echo "- NVIDIA driver {{ nvidia_driver_version }}, CUDA {{ cuda_version_full }}" >> {{ log_file }}
        echo "- TensorRT installed" >> {{ log_file }}
        echo "- SSH on port {{ ssh_port }} (key-only)" >> {{ log_file }}
        echo "- Docker + NVIDIA runtime ready" >> {{ log_file }}
        echo "- Tailscale and RealVNC installed" >> {{ log_file }}
        echo "- Healthcheck active (every 30 s)" >> {{ log_file }}
        echo "- Auto reboot daily at {{ auto_reboot_time }}" >> {{ log_file }}
        echo "- Auto test environment: ~/code/auto_test (Python 3.12 venv)" >> {{ log_file }}
        echo "===================================================================" >> {{ log_file }}
        echo "Completed at: $(date)" >> {{ log_file }}
        echo "Log file: {{ log_file }}" >> {{ log_file }}

    - debug:
        msg: |
          ===================================================================
          ✅ Setup complete!
          - NVIDIA driver {{ nvidia_driver_version }}, CUDA {{ cuda_version_full }}
          - TensorRT installed
          - SSH on port {{ ssh_port }} (key-only)
          - Docker + NVIDIA runtime ready
          - Tailscale and RealVNC installed
          - Healthcheck active (every 30 s)
          - Auto reboot daily at {{ auto_reboot_time }}
          - Auto test environment: ~/code/auto_test (Python 3.12 venv)

          Activate venv: source ~/code/auto_test/activate.sh
          Log file saved to: {{ log_file }}
          ===================================================================

  handlers:
    - name: restart sshd
      systemd: { name: sshd, state: restarted }
    - name: restart docker
      systemd: { name: docker, state: restarted }
    - name: restart gdm3
      systemd: { name: gdm3, state: restarted }
    - name: update ldconfig
      command: ldconfig
    - name: reload systemd
      systemd: { daemon_reload: yes }
